#第一个数据源
spring.datasource.druid.url=jdbc:mysql://47.99.85.44/py_db
spring.datasource.druid.username=py_db
spring.datasource.druid.password=py_test
#第二个数据源

#spring.datasource.druid.url=jdbc:mysql://192.168.31.10/xyzp
#spring.datasource.druid.username=test
#spring.datasource.druid.password=123456
#

#连接池配置
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.initial-size=10
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=8
spring.datasource.druid.max-wait=10000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.validationQuery=SELECT 1 FROM DUAL
spring.datasource.druid.testWhileIdle=true
spring.datasource.druid.testOnBorrow=false
spring.datasource.druid.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true
#合并多个DruidDataSource的监控数据
spring.datasource.druid.useGlobalDataSourceStat=true

#连接池配置
#spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.druid.initial-size=10
#spring.datasource.druid.max-active=20
#spring.datasource.druid.min-idle=8
#spring.datasource.druid.max-wait=10000
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
## 配置一个连接在池中最小生存的时间，单位是毫秒
#spring.datasource.druid.minEvictableIdleTimeMillis=300000
#spring.datasource.druid.validationQuery=SELECT 1 FROM DUAL
#spring.datasource.druid.testWhileIdle=true
#spring.datasource.druid.testOnBorrow=false
#spring.datasource.druid.testOnReturn=false
## 打开PSCache，并且指定每个连接上PSCache的大小
#spring.datasource.druid.poolPreparedStatements=true
#spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
## 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.druid.filters=stat,wall,log4j
## 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true
##合并多个DruidDataSource的监控数据
#spring.datasource.druid.useGlobalDataSourceStat=true


server.servlet.context-path=/chat/

server.port=8081
server.session.timeout=3000
server.session-timeout=30

spring.freemarker.suffix=.html
spring.freemarker.cache=true
spring.freemarker.request-context-attribute=rc
#spring.freemarker.settings.auto_import=/macro.html as m
#spring.freemarker.template-loader-path=file:/home/pi/project/check/
#spring.freemarker.template-loader-path=file:/root/service/wdxy/resources/
spring.freemarker.template-loader-path=classpath:/templates/

spring.mvc.static-path-pattern=/**
#spring.resources.static-locations=file:/home/pi/project/check/
#spring.resources.static-locations=file:/root/service/resources/
spring.resources.static-locations=classpath:/templates/

# REDIS配置
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379  
# Redis服务器连接密码（默认为空）
#spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=-1
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1  
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=1000 
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=10
# 连接超时时间（毫秒）
spring.redis.timeout=2000

#netty端口

nio.netty.port = 8082

#自定义属性
#是否开发模式，开发模式系统将不进行权限验证
com.chat.develop=true
#自动登录用户id，当develop属性为true时生效
com.chat.userid=00033c9628e24b40bf4c08f8f2de206f

